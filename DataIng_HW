 ``` 
1.
from re import L
def square_root_generator(limit):
    n = 1
    while n <= limit:
        yield n ** 0.5
        n += 1

# 1
limit = 5
generator = square_root_generator(limit)
sum_of_outputs = sum(generator)
print("Sum of the outputs where the limit is 5:", sum_of_outputs)

#2
limit2=13
gen = square_root_generator(limit2)

for _ in range(limit2-1):
  next(gen)
thirteen_n =next(gen)
print("13th number yielded:",thirteen_n)

Answer:
Sum of the outputs where the limit is 5: 8.382332347441762
13th number yielded: 3.605551275463989

 ``` 

 ``` 
2.
import duckdb

# Define the first generator
def people_1():
    for i in range(1, 6):
        yield (i, f"Person_{i}", 25 + i, "City_A", None)

# Define the second generator
def people_2():
    for i in range(3, 9):
        yield (i, f"Person_{i}", 30 + i, "City_B", f"Job_{i}")

# Connect to DuckDB
con = duckdb.connect(database=':memory:', read_only=False)

# Create a table
con.execute("""
CREATE TABLE People4 (
    ID INTEGER,
    Name VARCHAR,
    Age INTEGER,
    City VARCHAR,
    Occupation VARCHAR
)
""")

# Load data from the first generator into the table
gen_1 = people_1()
for record in gen_1:
    con.execute("INSERT INTO People4 VALUES (?, ?, ?, ?, ?)", record)

# Append data from the second generator to the table
gen_2 = people_2()
for record in gen_2:
    con.execute("INSERT INTO People4 VALUES (?, ?, ?, ?, ?)", record)

# Calculate the sum of ages of all people
sum_of_ages = con.execute("SELECT SUM(Age) FROM People4").fetchone()[0]
print("Sum of ages of all people:", sum_of_ages)

Answer: Sum of ages of all people: 353

 ``` 

 ``` 
3.
import duckdb

# Define the first generator
def people_1():
    for i in range(1, 6):
        yield (i, f"Person_{i}", 25 + i, "City_A", None)

# Define the second generator
def people_2():
    for i in range(3, 9):
        yield (i, f"Person_{i}", 30 + i, "City_B", f"Job_{i}")

# Connect to DuckDB
con = duckdb.connect(database=':memory:', read_only=False)

# Create a table with primary key ID
con.execute("""
CREATE TABLE People6 (
    ID INTEGER PRIMARY KEY,
    Name VARCHAR,
    Age INTEGER,
    City VARCHAR,
    Occupation VARCHAR
)
""")

# Load data from the first generator into the table
gen_1 = people_1()
for record in gen_1:
    con.execute("INSERT INTO People6 VALUES (?, ?, ?, ?, ?)", record)

# Use MERGE to load data from the second generator, replacing records with overlapping IDs
gen_2 = people_2()
for record in gen_2:
    con.execute("INSERT OR REPLACE INTO People6 VALUES (?, ?, ?, ?, ?)", record)

# Calculate the sum of ages of all people
sum_of_ages = con.execute("SELECT SUM(Age) FROM People6").fetchone()[0]
print("Sum of ages of all people:", sum_of_ages)

 ``` 
